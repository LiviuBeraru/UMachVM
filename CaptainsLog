 vim:filetype=txt textwidth=70 wrap
#####################################################################
#####################################################################

#     #                 #
#  #  #  ######         #         ####   #    #  ######
#  #  #  #              #        #    #  #    #  #
#  #  #  #####          #        #    #  #    #  #####
#  #  #  #              #        #    #  #    #  #
#  #  #  #              #        #    #   #  #   #
 ## ##   ######         #######   ####     ##    ######

 #    # #     #                         #     # #     #
 #    # ##   ##    ##     ####   #    # #     # ##   ##
 #    # # # # #   #  #   #    #  #    # #     # # # # #
 #    # #  #  #  #    #  #       ###### #     # #  #  #
 #    # #     #  ######  #       #    #  #   #  #     #
 #    # #     #  #    #  #    #  #    #   # #   #     #
  ####  #     #  #    #   ####   #    #    #    #     #

#####################################################################
#####################################################################

#########      ###      ########    ##           #######    #########
##     ##    ##   ##    ##     ##   ##          ##     ##   ##     ##
##          ##     ##   ##     ##   ##          ##     ##   ##       
##          ##     ##   ##     ##   ##          ##     ##   ##       
##          #########   ########    ##          ##     ##   ##   ####
##          ##     ##   ##          ##          ##     ##   ##     ##
##     ##   ##     ##   ##          ##          ##     ##   ##     ##
#########   ##     ##   ##          #########    #######    #########

#####################################################################
#####                        The Conquest                       #####
#####################################################################

=== 08.04.2012 ===
Malk.
Es gibt auch sprachlich einen Unterschied zwischen "Instruktion"
(engl. instruction) und "Befehl" (engl. command), besonders in dem
Kontext dieses Projektes.
Befehl ist etwas kurzes und deutet auf eine einfache Aktion hin:
"tue das".
Instruktion deutet darauf hin, wie die Aktion getan werden sollte:
"tue das so und so".
Wir sollten daher in der Dokumentation aufpassen, wenn wir
Befehl oder Instruktion verwenden. Den Unterschied habe ich im Glossar
aufgenommen.
Befehl ist die Operation, die ausgeführt werden sollte.
Beispiel: add, sub.
Instruktion ist das ganze Ding: add r1 r2 r3. Enthält also auch die
Argumenten. Instruktionen, die lediglich aus einem Befehl ohne
Argumenten bestehen sind immernoch Instruktionen.


=== 08.04.2012 ===
Malk.
Obwohl es Ostern ist, habe ich trotzdem am Projekt gearbeitet.
Wir müssen vorankommen.
Wie ich mich kenne, werde ich weiter wie besessen arbeiten.
Halt mich zurück!


=== 12.04.2012 ===
Malk.
-- Stand bis jetzt --
---------------------
Die Spezifikation besteht aus allgemeinen Sachen, die man auch alleine
hinschreiben konnte, ohne sich groß zu unterhalten. Alles kann und
sollte korrigiert werden: Struktur umdenken, Kapitel umbennen, neue
Abschnitte etc. Alles ist jetzt noch flexibel und kann nach Belieben
verändert werden, später nicht mehr so ganz.
Wir müssen jetzt aber auch ein paar grundlegendere Sachen entscheiden,
sonst kommen wir nicht weiter:
- Wie viele Register gibt es für den Programmierer? - Die sollte man
  auflisten und beschreiben können.
- Gibt es spezielle Register?
- Wie nennen sich die Register? (Nich deren Ansprechung im Asm-Code,
  sondern allgemein in der Maschinenspezifikation).
  Möglichkeiten wären:
  *) R1, R2, R3, T1, T2 ...
  *) A, B, C, D, E, F ...
  *) aax, abx, acx, adx, aex, afx ...
  *) x, xx, xxx, xxxx, xxxxx, xxxxxx ...
  *) 1, 2, 3, 4, 5, 6 ...
  *) etc 
- Welche andere Register gibt es?
- Welche andere Befehlsformate gibt es? Reichen die, die schon da stehen?
- Welche Namen sollen die Formate haben? Jetzt steh da "Format 1", 
  "Format 2" etc. Sollen sie nicht anderes heißen?
- Die Befehlskategorien: sind das alle? Sind es zu viele?
- Wenn ein Befehl (opcode) 1 Byte lang ist (8 Bit), wie kann man die
  möglichen 256 Befehle verteilen? Ich meine die Kategorien. Wäre es
  sinnvoll zu sagen: wir haben 8 Kategorien, dann haben wir 256/8 = 32
  Befehle per Kategorie, also teilen wir:
  *) Befehle 0-31 Kontrolle
  *) 32 - 62 Arithmetik etc
- Glossar erweitern, falls möglich.


=== 12.04.2012 ===
Malk.
Vorschlag bzgl. Register:
- Es gibt 2 Gruppen von 64 Registern (warum nicht gleich 2^8 = 256
  Register?):
  1) allgemeine Register: sie sind dafür gedacht, dass der
     Programmierer sie frei verwenden kann, ohne dass deren Inhalt von
     der Maschine (im Hintergrund) verändert wird. Man kann denen
     (wie den MIPS Registern) konventionellen Zwecke vergeben, die man
     beim Programmieren einhalten soll, für die Maschine aber sind
     sie frei und haben keinen bestimmten Zweck.
  2) spezielle Register, die für bestimmte Zwecke von der Maschine
     verwendet werden.
     Beispiele für solche Dinge: aktuelle Instruktion, instruction
     pointer, status register, stack pointer, Quotient/Rest der
     Division, Default Register (default Wert für verschiedene Zwecke)
     etc.
Die Einteilung scheint mir sinnvoll zu sein.
Die Namen der Register wären:
  1) allgemeine Register: R1, R2, ...R64 (fängt bei 1 an, R0
     vielleicht reserviert)
  2) spezielle Register: S1, S2, ...S64.
     Manche spezielle Register haben doppelte Namen (alias):
     S1 = IN  (aktuelle Instruktion)
     S2 = S   (status Register mit definierten Flags)
     S3 = IC  (instruction pointer, instruction counter)
     S4 = SP  (stack pointer)
     S5 = PR  (protection: schreibschutz mancher Register)
     ...
     Diese Alias wären sozusagen offizielle Namen in der Spezifikation
     und sollten entsprechend auch vom Assembler erkannt werden.
Ich würde die Anzahl der Register einer Gruppe von 32 auf 64 erhöhen,
damit wir Spielraum haben. Es bleiben halt ein paar Register
unbenutzt.


=== 12.04.2012 ===
Malk.
Vorschlag bzgl. Anatomie der Maschine:
== IO
Die Maschine sollte eine Ausgabe-Einheit haben. Diese Einheit sollte
aber nicht ein Bildschirm oder Ähnliches sein, sondern eine
parallele Schnittstelle. Es sind sozusagen 32 Kabelchen die
rausgehen. Es ist Aufgabe eines Peripheriegerätes, diese 32 Bits zu
interpretieren.
== Bus
Frage: zwischen der CPU und dem Speicher müss es Kommunikationswege
geben. Weil die Maschine 32 Bit Instruktionen ausführt, ist es
sinnvoll, dass es mindestens einen 32 Bit Bus zum Speicher gibt.
Sollte man einen zusätzlichen 32 Bit Bus für Daten einführen?
Man sollte sich hier den Ablauf einer Instruktion überlegen:
fetch - decode - execute.
Wie kann man sich das im Sinne eines Buses vorstellen?
Besonders der 'fetch' Schritt. Kann man das mit einer einzigen
Verbindung zwischen CPU und Speicher realisieren?
Ich habe versucht (mit Inkscape) eine Skizze davon zu machen
(doc/Specs/img).

Es ist 2 Uhr in der Nacht.



=== 25.04.2012 ===
Malk.
Ich arbeite wie ein Verrückter an der Spezifikation.
Es sollte gut werden, oder möglichst gut werden.
Ich brauche aber mehr Zeit, viel mehr Zeit.
Zwei Dinge sind schwer:
- die sinnvolle Verteilung der opcodes, die sinnvolle Strukturierung.
  die Maschine sollte RISC bleiben, aber keine sinnvolle Dinge
  vermissen.
- das schnelle TeX-en. die Strukturierung der Dateien ist auch nicht
  leicht. Ich habe sie mehrmals geändert.



=== 30.04.2012 ===
Malk.
Ich schreibe den ganzen Tag an der Spezifikation.
Bin sehr müde und möchte etwas anderes machen, wie... Perl oder
Übungen für andere Fächer.
Mitarbeit wäre schön gewesen.
Es ist 02:32 Uhr und morgen um 8 muss ich da sein.



=== 30.04.2012 ===
Malk.
Im Kapitel über Sprünge (Spezifikation) muss man deutlicher machen,
dass die Maschine einen numerischen Versatz kennt. Nur auf
Assembler-Ebene gibt es Labels. Eine deutlichere Formulierung wird
gefragt.

Ebenfalls stellt sich die folgende Frage, deren Antwort sich stark
auf die Implementierung auswirkt:
Ein Sprung-Versatz hat die Form 'springe x Instruktionen weiter
(rückwärts)'. Also in etwa '0xD8 0x03' (JMP 3). 
Die Frage ist ob x berücksichtigen sollte, dass die
Maschine automatisch den Programmcounter IP inkrementiert, oder ist x
der genaue Versatz? Mit Berücksichtigung müsse der Versatz 1 weniger
als der eigentliche Versatz sein, denn nachdem branch oder jump das
Register IP modifiziert hat, kommt die Maschine und addiert noch mal
4 drauf.
-- WHAT?
-- Ok, Beispiel.

--------------------------
ip     | execute | ip
vorher | opcode  | nachher
--------------------------
0      | ADD     |  4     
4      | ADD     |  8
8      | JMP x   | 24      ___
16     | LB      | 20         | Abstand von JMP
20     | KIL     | 24         | bis DIE ist 3
24     | DIE     | 28      ___| Instruktionen
--------------------------
Im obigen Code kommt ein JMP vor. Es steht aber nicht JMP 2 oder 
JMP 3, sondern JMP x. Es muss auf jeden Fall 3 Instruktionen weiter
gesprungen werden, damit DIE nach dem Sprung ausgeführt wird
(IP nach der Ausführung von JMP ist 24). Die Frage ist, was ist x,
was steht in dem Maschinencode.
Wenn x=2, dann heißt es, dass der Assembler damit rechnet, dass die
Maschine einfach 2*4 zum IP addiert und dann automatisch noch mal 4,
wie nach jeder Instruktion. Der Assembler ist also derjenige, der den
Versatz von 3 auf 2 anpasst.
Wenn x=3 sein sollte (spring 3 Instruktionen weiter), dann tut der
Assembler einfach den Abstand bis DIE ausrechnen (das ist 3) und
diesen Abstand in die Instruktion schreibt. Die Maschine ist diejenige
die weiß: "aha, der will 3 weiter springen, aber ich inkrementier IP
sowieso, also addiere ich nicht 3, wie er will, sondern nur 2*4
drauf."
Ich glaube, von Semantik her, wäre die zweite Version klarer.
Die Instruktion würde heißen: "Mach 3 Instruktionen weiter".
Wenn es 2 steht, dann ist die Semantik: "Ich möchte eigentlich 3
weiter, aber du bist so dumm und addierst zum IP genau was ich sage,
also sage ich nur 2 weiter und lasse dich blind weiter machen."

Aber es gibt vielleicht auch andere Meinungen dazu. Vielleicht
interpretiere ich das alles falsch.
Vielleicht lebe ich in einem Traum.
Vielleicht bin ich eigentlich tot und das alles ist nur Errinerung?
Vielleicht bin ich eigentlich in einer psychiatrischen Anstalt
eingesperrt und das alles ist mein Spinnen?
Naja, VIM und /proc/* sind coole Sachen auf jeden Fall. Vielleicht
kriege ich einen Kernel in der Anstalt. Zumindest in der
Mittagspause.


=== 01.05.2012 ===
Malk.
Tag der Arbeit!
@init0:
Ok, dann machen wir's mal so... Compare speichert das Ergebnis in
das Register CMP und die Branch-Instructions beziehen sich auf dieses
Register. So gewinnt man mehr Bits für den Branch-Off-Set.
Syntax: CMP R1 R2
(obwohl Knuth hat CMP $X $Y $Z und /me weint jammerlich)
Nachteil: nicht sofort ersichtlich, wo das Ergebnis hingeht.


=== 20.07.2012 ===
Malk.
Noch zu tun:
- Beschreibung der Speicherstruktur (Interrupt table etc): Abschnitt
  Speicher in organization/Speicher.
- Speicher: Abschnitt über den Speicher muss überarbeitet werden, weil
  es kein Bus mehr gibt und dort wird immer der Bus erwähnt.
- Beschreibung der IO-Instruktionen im Instruktionen Abschnitt und
  auch eine Beschreibung, wie IO funktioniert (Abschnitt IO im Kapitel
  Organisation).
- Beschreibung des Kerns: hat Register drauf, etc.
- Beispiele für die Instruktionen korrigieren, weil sie jetzt Befehle
  verwenden, die es nicht mehr gibt.
- Durchlesen, Fehler korrigieren.


=== 21.07.2012 ===
Malk.
TODO: Fehlerbits in ERR überlegen! Es wird Zeit, dass wir zu allen
Befehlen die Fehlerbehandlung spezifizieren. Diese fehlt nämlich
total.


=== 26.07.2012 ===
Malk.
TODO: 
- den ganzen Abschnitt Organisation lesen und Inkonsistenzen
  beseitigen
- Endlich die Interruptnummer und Bits im ERR Register definieren,
  damit wir Bezug darauf nehmen können.
- Für alle Befehle, die Fehler/Unterbrechungen erzeugen spezifizieren,
  welche Unterbrechungsnummer/Bits in ERR gesetzt werden.

Wichtig:
- ++ Debugging Konzept ++
- ++ Assembler Spezifikation ++
